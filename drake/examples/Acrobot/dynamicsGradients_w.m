function [df, d2f] = dynamicsGradients_w(a1, a2, a3, a4, a5, order)
% This is an auto-generated file.
%
% See <a href="matlab: help generateGradients">generateGradients</a>. 

% Check inputs:
typecheck(a1,'AcrobotPlant');
if (nargin<5) order=1; end
if (order<1) error(' order must be >= 1'); end
sizecheck(a1,[1  1]);
sizecheck(a2,[1  1]);
sizecheck(a3,[4  1]);
sizecheck(a4,[1  1]);
sizecheck(a5,[1  1]);

% Symbol table:
Ic1=a1.Ic1;
Ic2=a1.Ic2;
a3_1=a3(1);
a3_2=a3(2);
a3_3=a3(3);
a3_4=a3(4);
a4_1=a4(1);
a5_1=a5(1);
b1=a1.b1;
b2=a1.b2;
g=a1.g;
l1=a1.l1;
lc1=a1.lc1;
lc2=a1.lc2;
m1=a1.m1;
m2=a1.m2;


% Compute Gradients:
df = sparse(4,7);
df(1,4) = 1;
df(2,5) = 1;
df(3,2) = -(g*(l1*lc2^2*m2^2*cos(a3_1) + 2*Ic2*l1*m2*cos(a3_1) + 2*Ic2*lc1*m1*cos(a3_1) - l1*lc2^2*m2^2*cos(a3_1 + 2*a3_2) + 2*lc1*lc2^2*m1*m2*cos(a3_1)))/(2*Ic1*Ic2 + l1^2*lc2^2*m2^2 + 2*Ic2*l1^2*m2 + 2*Ic2*lc1^2*m1 + 2*Ic1*lc2^2*m2 + 2*lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(2*a3_2));
df(3,3) = (2*l1*lc2*m2*(a4_1*sin(a3_2) + a5_1*sin(a3_2) + Ic2*a3_3^2*cos(a3_2) + Ic2*a3_4^2*cos(a3_2) - a3_4*b2*sin(a3_2) + a3_3^2*lc2^2*m2*cos(a3_2) + a3_4^2*lc2^2*m2*cos(a3_2) + 2*Ic2*a3_3*a3_4*cos(a3_2) + g*lc2*m2*cos(a3_1 + 2*a3_2) + 2*a3_3*a3_4*lc2^2*m2*cos(a3_2) + a3_3^2*l1*lc2*m2*cos(2*a3_2)))/(2*Ic1*Ic2 + l1^2*lc2^2*m2^2 + 2*Ic2*l1^2*m2 + 2*Ic2*lc1^2*m1 + 2*Ic1*lc2^2*m2 + 2*lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(2*a3_2)) + (4*l1^2*lc2^2*m2^2*sin(2*a3_2)*(Ic2*a4_1 + Ic2*a5_1 + Ic2*a3_3*b1 - Ic2*a3_4*b2 + a4_1*lc2^2*m2 + a5_1*lc2^2*m2 + a3_3*b1*lc2^2*m2 - a3_4*b2*lc2^2*m2 + (g*l1*lc2^2*m2^2*sin(a3_1))/2 - (a3_3^2*l1^2*lc2^2*m2^2*sin(2*a3_2))/2 + Ic2*g*l1*m2*sin(a3_1) + Ic2*g*lc1*m1*sin(a3_1) - (g*l1*lc2^2*m2^2*sin(a3_1 + 2*a3_2))/2 + a4_1*l1*lc2*m2*cos(a3_2) + a5_1*l1*lc2*m2*cos(a3_2) - a3_3^2*l1*lc2^3*m2^2*sin(a3_2) - a3_4^2*l1*lc2^3*m2^2*sin(a3_2) - a3_4*b2*l1*lc2*m2*cos(a3_2) - Ic2*a3_3^2*l1*lc2*m2*sin(a3_2) - Ic2*a3_4^2*l1*lc2*m2*sin(a3_2) + g*lc1*lc2^2*m1*m2*sin(a3_1) - 2*a3_3*a3_4*l1*lc2^3*m2^2*sin(a3_2) - 2*Ic2*a3_3*a3_4*l1*lc2*m2*sin(a3_2)))/(2*Ic1*Ic2 + l1^2*lc2^2*m2^2 + 2*Ic2*l1^2*m2 + 2*Ic2*lc1^2*m1 + 2*Ic1*lc2^2*m2 + 2*lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(2*a3_2))^2;
df(3,4) = (a3_3*l1^2*lc2^2*m2^2*sin(2*a3_2) - b1*lc2^2*m2 - Ic2*b1 + 2*a3_3*l1*lc2^3*m2^2*sin(a3_2) + 2*a3_4*l1*lc2^3*m2^2*sin(a3_2) + 2*Ic2*a3_3*l1*lc2*m2*sin(a3_2) + 2*Ic2*a3_4*l1*lc2*m2*sin(a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2);
df(3,5) = (Ic2*b2 + b2*lc2^2*m2 + 2*a3_3*l1*lc2^3*m2^2*sin(a3_2) + 2*a3_4*l1*lc2^3*m2^2*sin(a3_2) + b2*l1*lc2*m2*cos(a3_2) + 2*Ic2*a3_3*l1*lc2*m2*sin(a3_2) + 2*Ic2*a3_4*l1*lc2*m2*sin(a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2);
df(3,6) = -(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2);
df(3,7) = -(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2);
df(4,2) = (g*(l1*lc2^2*m2^2*cos(a3_1) - Ic1*lc2*m2*cos(a3_1 + a3_2) + Ic2*l1*m2*cos(a3_1) + Ic2*lc1*m1*cos(a3_1) - l1^2*lc2*m2^2*cos(a3_1 + a3_2) + lc1*lc2^2*m1*m2*cos(a3_1) - l1*lc2^2*m2^2*cos(a3_1 + a3_2)*cos(a3_2) + l1^2*lc2*m2^2*cos(a3_1)*cos(a3_2) - lc1^2*lc2*m1*m2*cos(a3_1 + a3_2) + l1*lc1*lc2*m1*m2*cos(a3_1)*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2);
df(4,3) = (2*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(Ic1*a3_4*b2 - Ic2*a4_1 - Ic1*a5_1 - Ic2*a5_1 - Ic2*a3_3*b1 - Ic1*a4_1 + Ic2*a3_4*b2 - a4_1*l1^2*m2 - a5_1*l1^2*m2 - a4_1*lc1^2*m1 - a4_1*lc2^2*m2 - a5_1*lc1^2*m1 - a5_1*lc2^2*m2 + a3_4*b2*l1^2*m2 - a3_3*b1*lc2^2*m2 + a3_4*b2*lc1^2*m1 + a3_4*b2*lc2^2*m2 + g*l1^2*lc2*m2^2*sin(a3_1 + a3_2) + Ic1*g*lc2*m2*sin(a3_1 + a3_2) - g*l1*lc2^2*m2^2*sin(a3_1) + a3_3^2*l1^2*lc2^2*m2^2*sin(2*a3_2) + (a3_4^2*l1^2*lc2^2*m2^2*sin(2*a3_2))/2 - Ic2*g*l1*m2*sin(a3_1) - Ic2*g*lc1*m1*sin(a3_1) - 2*a4_1*l1*lc2*m2*cos(a3_2) - 2*a5_1*l1*lc2*m2*cos(a3_2) + a3_3^2*l1*lc2^3*m2^2*sin(a3_2) + a3_3^2*l1^3*lc2*m2^2*sin(a3_2) + a3_4^2*l1*lc2^3*m2^2*sin(a3_2) + g*l1*lc2^2*m2^2*sin(a3_1 + a3_2)*cos(a3_2) - a3_3*b1*l1*lc2*m2*cos(a3_2) + 2*a3_4*b2*l1*lc2*m2*cos(a3_2) - g*l1^2*lc2*m2^2*cos(a3_2)*sin(a3_1) + g*lc1^2*lc2*m1*m2*sin(a3_1 + a3_2) + Ic1*a3_3^2*l1*lc2*m2*sin(a3_2) + Ic2*a3_3^2*l1*lc2*m2*sin(a3_2) + Ic2*a3_4^2*l1*lc2*m2*sin(a3_2) - g*lc1*lc2^2*m1*m2*sin(a3_1) + a3_3*a3_4*l1^2*lc2^2*m2^2*sin(2*a3_2) + 2*a3_3*a3_4*l1*lc2^3*m2^2*sin(a3_2) + a3_3^2*l1*lc1^2*lc2*m1*m2*sin(a3_2) + 2*Ic2*a3_3*a3_4*l1*lc2*m2*sin(a3_2) - g*l1*lc1*lc2*m1*m2*cos(a3_2)*sin(a3_1)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (lc2*m2*(4*a4_1*l1*sin(a3_2) + 4*a5_1*l1*sin(a3_2) + 2*Ic1*g*cos(a3_1 + a3_2) + 2*a3_3^2*l1^3*m2*cos(a3_2) + 2*a3_3*b1*l1*sin(a3_2) - 4*a3_4*b2*l1*sin(a3_2) + g*l1^2*m2*cos(a3_1 + a3_2) + 2*g*lc1^2*m1*cos(a3_1 + a3_2) + 2*Ic1*a3_3^2*l1*cos(a3_2) + 2*Ic2*a3_3^2*l1*cos(a3_2) + 2*Ic2*a3_4^2*l1*cos(a3_2) + g*l1^2*m2*cos(a3_1 - a3_2) + 2*a3_3^2*l1*lc1^2*m1*cos(a3_2) + 2*a3_3^2*l1*lc2^2*m2*cos(a3_2) + 2*a3_4^2*l1*lc2^2*m2*cos(a3_2) - g*l1*lc1*m1*cos(a3_1 + a3_2) + 4*Ic2*a3_3*a3_4*l1*cos(a3_2) + 4*a3_3^2*l1^2*lc2*m2*cos(2*a3_2) + 2*a3_4^2*l1^2*lc2*m2*cos(2*a3_2) + g*l1*lc1*m1*cos(a3_1 - a3_2) + 2*g*l1*lc2*m2*cos(a3_1 + 2*a3_2) + 4*a3_3*a3_4*l1*lc2^2*m2*cos(a3_2) + 4*a3_3*a3_4*l1^2*lc2*m2*cos(2*a3_2)))/(2*Ic1*Ic2 + l1^2*lc2^2*m2^2 + 2*Ic2*l1^2*m2 + 2*Ic2*lc1^2*m1 + 2*Ic1*lc2^2*m2 + 2*lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(2*a3_2));
df(4,4) = -(2*a3_3*l1^2*lc2^2*m2^2*sin(2*a3_2) - b1*lc2^2*m2 - Ic2*b1 + a3_4*l1^2*lc2^2*m2^2*sin(2*a3_2) + 2*a3_3*l1*lc2^3*m2^2*sin(a3_2) + 2*a3_3*l1^3*lc2*m2^2*sin(a3_2) + 2*a3_4*l1*lc2^3*m2^2*sin(a3_2) - b1*l1*lc2*m2*cos(a3_2) + 2*Ic1*a3_3*l1*lc2*m2*sin(a3_2) + 2*Ic2*a3_3*l1*lc2*m2*sin(a3_2) + 2*Ic2*a3_4*l1*lc2*m2*sin(a3_2) + 2*a3_3*l1*lc1^2*lc2*m1*m2*sin(a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2);
df(4,5) = -(Ic1*b2 + Ic2*b2 + b2*l1^2*m2 + b2*lc1^2*m1 + b2*lc2^2*m2 + a3_3*l1^2*lc2^2*m2^2*sin(2*a3_2) + a3_4*l1^2*lc2^2*m2^2*sin(2*a3_2) + 2*a3_3*l1*lc2^3*m2^2*sin(a3_2) + 2*a3_4*l1*lc2^3*m2^2*sin(a3_2) + 2*b2*l1*lc2*m2*cos(a3_2) + 2*Ic2*a3_3*l1*lc2*m2*sin(a3_2) + 2*Ic2*a3_4*l1*lc2*m2*sin(a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2);
df(4,6) = (Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2);
df(4,7) = (Ic1 + Ic2 + l1^2*m2 + lc1^2*m1 + lc2^2*m2 + 2*l1*lc2*m2*cos(a3_2))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2);

% d2f
if (order>=2)
  d2f = sparse(4,49);
  d2f(3,9) = (g*(l1*lc2^2*m2^2*sin(a3_1) + 2*Ic2*l1*m2*sin(a3_1) + 2*Ic2*lc1*m1*sin(a3_1) - l1*lc2^2*m2^2*sin(a3_1 + 2*a3_2) + 2*lc1*lc2^2*m1*m2*sin(a3_1)))/(2*Ic1*Ic2 + l1^2*lc2^2*m2^2 + 2*Ic2*l1^2*m2 + 2*Ic2*lc1^2*m1 + 2*Ic1*lc2^2*m2 + 2*lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(2*a3_2));
  d2f(3,10) = (2*g*l1^2*lc2^2*m2^2*sin(2*a3_2)*(l1*lc2^2*m2^2*cos(a3_1) + 2*Ic2*l1*m2*cos(a3_1) + 2*Ic2*lc1*m1*cos(a3_1) - l1*lc2^2*m2^2*cos(a3_1 + 2*a3_2) + 2*lc1*lc2^2*m1*m2*cos(a3_1)))/(2*Ic1*Ic2 + l1^2*lc2^2*m2^2 + 2*Ic2*l1^2*m2 + 2*Ic2*lc1^2*m1 + 2*Ic1*lc2^2*m2 + 2*lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(2*a3_2))^2 - (2*g*l1*lc2^2*m2^2*sin(a3_1 + 2*a3_2))/(2*Ic1*Ic2 + l1^2*lc2^2*m2^2 + 2*Ic2*l1^2*m2 + 2*Ic2*lc1^2*m1 + 2*Ic1*lc2^2*m2 + 2*lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(2*a3_2));
  d2f(3,16) = (2*g*l1^2*lc2^2*m2^2*sin(2*a3_2)*(l1*lc2^2*m2^2*cos(a3_1) + 2*Ic2*l1*m2*cos(a3_1) + 2*Ic2*lc1*m1*cos(a3_1) - l1*lc2^2*m2^2*cos(a3_1 + 2*a3_2) + 2*lc1*lc2^2*m1*m2*cos(a3_1)))/(2*Ic1*Ic2 + l1^2*lc2^2*m2^2 + 2*Ic2*l1^2*m2 + 2*Ic2*lc1^2*m1 + 2*Ic1*lc2^2*m2 + 2*lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(2*a3_2))^2 - (2*g*l1*lc2^2*m2^2*sin(a3_1 + 2*a3_2))/(2*Ic1*Ic2 + l1^2*lc2^2*m2^2 + 2*Ic2*l1^2*m2 + 2*Ic2*lc1^2*m1 + 2*Ic1*lc2^2*m2 + 2*lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(2*a3_2));
  d2f(3,17) = (8*l1^2*lc2^2*m2^2*cos(2*a3_2)*(Ic2*a4_1 + Ic2*a5_1 + Ic2*a3_3*b1 - Ic2*a3_4*b2 + a4_1*lc2^2*m2 + a5_1*lc2^2*m2 + a3_3*b1*lc2^2*m2 - a3_4*b2*lc2^2*m2 + (g*l1*lc2^2*m2^2*sin(a3_1))/2 - (a3_3^2*l1^2*lc2^2*m2^2*sin(2*a3_2))/2 + Ic2*g*l1*m2*sin(a3_1) + Ic2*g*lc1*m1*sin(a3_1) - (g*l1*lc2^2*m2^2*sin(a3_1 + 2*a3_2))/2 + a4_1*l1*lc2*m2*cos(a3_2) + a5_1*l1*lc2*m2*cos(a3_2) - a3_3^2*l1*lc2^3*m2^2*sin(a3_2) - a3_4^2*l1*lc2^3*m2^2*sin(a3_2) - a3_4*b2*l1*lc2*m2*cos(a3_2) - Ic2*a3_3^2*l1*lc2*m2*sin(a3_2) - Ic2*a3_4^2*l1*lc2*m2*sin(a3_2) + g*lc1*lc2^2*m1*m2*sin(a3_1) - 2*a3_3*a3_4*l1*lc2^3*m2^2*sin(a3_2) - 2*Ic2*a3_3*a3_4*l1*lc2*m2*sin(a3_2)))/(2*Ic1*Ic2 + l1^2*lc2^2*m2^2 + 2*Ic2*l1^2*m2 + 2*Ic2*lc1^2*m1 + 2*Ic1*lc2^2*m2 + 2*lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(2*a3_2))^2 - (2*l1*lc2*m2*(Ic2*a3_3^2*sin(a3_2) - a5_1*cos(a3_2) - a4_1*cos(a3_2) + Ic2*a3_4^2*sin(a3_2) + a3_4*b2*cos(a3_2) + a3_3^2*lc2^2*m2*sin(a3_2) + a3_4^2*lc2^2*m2*sin(a3_2) + 2*Ic2*a3_3*a3_4*sin(a3_2) + 2*g*lc2*m2*sin(a3_1 + 2*a3_2) + 2*a3_3*a3_4*lc2^2*m2*sin(a3_2) + 2*a3_3^2*l1*lc2*m2*sin(2*a3_2)))/(2*Ic1*Ic2 + l1^2*lc2^2*m2^2 + 2*Ic2*l1^2*m2 + 2*Ic2*lc1^2*m1 + 2*Ic1*lc2^2*m2 + 2*lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(2*a3_2)) - (8*l1^3*lc2^3*m2^3*sin(2*a3_2)*(a4_1*sin(a3_2) + a5_1*sin(a3_2) + Ic2*a3_3^2*cos(a3_2) + Ic2*a3_4^2*cos(a3_2) - a3_4*b2*sin(a3_2) + a3_3^2*lc2^2*m2*cos(a3_2) + a3_4^2*lc2^2*m2*cos(a3_2) + 2*Ic2*a3_3*a3_4*cos(a3_2) + g*lc2*m2*cos(a3_1 + 2*a3_2) + 2*a3_3*a3_4*lc2^2*m2*cos(a3_2) + a3_3^2*l1*lc2*m2*cos(2*a3_2)))/(2*Ic1*Ic2 + l1^2*lc2^2*m2^2 + 2*Ic2*l1^2*m2 + 2*Ic2*lc1^2*m1 + 2*Ic1*lc2^2*m2 + 2*lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(2*a3_2))^2 - (16*l1^4*lc2^4*m2^4*sin(2*a3_2)^2*(Ic2*a4_1 + Ic2*a5_1 + Ic2*a3_3*b1 - Ic2*a3_4*b2 + a4_1*lc2^2*m2 + a5_1*lc2^2*m2 + a3_3*b1*lc2^2*m2 - a3_4*b2*lc2^2*m2 + (g*l1*lc2^2*m2^2*sin(a3_1))/2 - (a3_3^2*l1^2*lc2^2*m2^2*sin(2*a3_2))/2 + Ic2*g*l1*m2*sin(a3_1) + Ic2*g*lc1*m1*sin(a3_1) - (g*l1*lc2^2*m2^2*sin(a3_1 + 2*a3_2))/2 + a4_1*l1*lc2*m2*cos(a3_2) + a5_1*l1*lc2*m2*cos(a3_2) - a3_3^2*l1*lc2^3*m2^2*sin(a3_2) - a3_4^2*l1*lc2^3*m2^2*sin(a3_2) - a3_4*b2*l1*lc2*m2*cos(a3_2) - Ic2*a3_3^2*l1*lc2*m2*sin(a3_2) - Ic2*a3_4^2*l1*lc2*m2*sin(a3_2) + g*lc1*lc2^2*m1*m2*sin(a3_1) - 2*a3_3*a3_4*l1*lc2^3*m2^2*sin(a3_2) - 2*Ic2*a3_3*a3_4*l1*lc2*m2*sin(a3_2)))/(2*Ic1*Ic2 + l1^2*lc2^2*m2^2 + 2*Ic2*l1^2*m2 + 2*Ic2*lc1^2*m1 + 2*Ic1*lc2^2*m2 + 2*lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(2*a3_2))^3;
  d2f(3,18) = (2*l1*lc2*m2*(Ic2*a3_3*cos(a3_2) + Ic2*a3_4*cos(a3_2) + a3_3*lc2^2*m2*cos(a3_2) + a3_4*lc2^2*m2*cos(a3_2) + a3_3*l1*lc2*m2*(2*cos(a3_2)^2 - 1)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (4*l1^2*lc2^2*m2^2*sin(2*a3_2)*(a3_3*l1^2*lc2^2*m2^2*sin(2*a3_2) - b1*lc2^2*m2 - Ic2*b1 + 2*a3_3*l1*lc2^3*m2^2*sin(a3_2) + 2*a3_4*l1*lc2^3*m2^2*sin(a3_2) + 2*Ic2*a3_3*l1*lc2*m2*sin(a3_2) + 2*Ic2*a3_4*l1*lc2*m2*sin(a3_2)))/(2*Ic1*Ic2 + l1^2*lc2^2*m2^2 + 2*Ic2*l1^2*m2 + 2*Ic2*lc1^2*m1 + 2*Ic1*lc2^2*m2 + 2*lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(2*a3_2))^2;
  d2f(3,19) = (l1*lc2*m2*(2*Ic2*a3_3*cos(a3_2) - b2*sin(a3_2) + 2*Ic2*a3_4*cos(a3_2) + 2*a3_3*lc2^2*m2*cos(a3_2) + 2*a3_4*lc2^2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (2*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(Ic2*b2 + b2*lc2^2*m2 + 2*a3_3*l1*lc2^3*m2^2*sin(a3_2) + 2*a3_4*l1*lc2^3*m2^2*sin(a3_2) + b2*l1*lc2*m2*cos(a3_2) + 2*Ic2*a3_3*l1*lc2*m2*sin(a3_2) + 2*Ic2*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d2f(3,20) = (l1*lc2*m2*sin(a3_2)*(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + 2*l1*lc2^3*m2^2*cos(a3_2) + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*cos(a3_2)^2 + 2*Ic2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d2f(3,21) = (l1*lc2*m2*sin(a3_2)*(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + 2*l1*lc2^3*m2^2*cos(a3_2) + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*cos(a3_2)^2 + 2*Ic2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d2f(3,24) = (2*l1*lc2*m2*(2*Ic2*a3_3*cos(a3_2) + 2*Ic2*a3_4*cos(a3_2) + 2*a3_3*lc2^2*m2*cos(a3_2) + 2*a3_4*lc2^2*m2*cos(a3_2) + 2*a3_3*l1*lc2*m2*cos(2*a3_2)))/(2*Ic1*Ic2 + l1^2*lc2^2*m2^2 + 2*Ic2*l1^2*m2 + 2*Ic2*lc1^2*m1 + 2*Ic1*lc2^2*m2 + 2*lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(2*a3_2)) - (4*l1^2*lc2^2*m2^2*sin(2*a3_2)*(a3_3*l1^2*lc2^2*m2^2*sin(2*a3_2) - b1*lc2^2*m2 - Ic2*b1 + 2*a3_3*l1*lc2^3*m2^2*sin(a3_2) + 2*a3_4*l1*lc2^3*m2^2*sin(a3_2) + 2*Ic2*a3_3*l1*lc2*m2*sin(a3_2) + 2*Ic2*a3_4*l1*lc2*m2*sin(a3_2)))/(2*Ic1*Ic2 + l1^2*lc2^2*m2^2 + 2*Ic2*l1^2*m2 + 2*Ic2*lc1^2*m1 + 2*Ic1*lc2^2*m2 + 2*lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(2*a3_2))^2;
  d2f(3,25) = (l1*lc2*m2*(2*Ic2*sin(a3_2) + 2*lc2^2*m2*sin(a3_2) + 2*l1*lc2*m2*cos(a3_2)*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2);
  d2f(3,26) = (2*l1*lc2*m2*sin(a3_2)*(Ic2 + lc2^2*m2))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2);
  d2f(3,31) = (l1*lc2*m2*(2*Ic2*a3_3*cos(a3_2) - b2*sin(a3_2) + 2*Ic2*a3_4*cos(a3_2) + 2*a3_3*lc2^2*m2*cos(a3_2) + 2*a3_4*lc2^2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2) - (8*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(Ic2*b2 + b2*lc2^2*m2 + 2*a3_3*l1*lc2^3*m2^2*sin(a3_2) + 2*a3_4*l1*lc2^3*m2^2*sin(a3_2) + b2*l1*lc2*m2*cos(a3_2) + 2*Ic2*a3_3*l1*lc2*m2*sin(a3_2) + 2*Ic2*a3_4*l1*lc2*m2*sin(a3_2)))/(2*Ic1*Ic2 + l1^2*lc2^2*m2^2 + 2*Ic2*l1^2*m2 + 2*Ic2*lc1^2*m1 + 2*Ic1*lc2^2*m2 - l1^2*lc2^2*m2^2*(2*cos(a3_2)^2 - 1) + 2*lc1^2*lc2^2*m1*m2)^2;
  d2f(3,32) = (2*l1*lc2*m2*sin(a3_2)*(Ic2 + lc2^2*m2))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2);
  d2f(3,33) = (2*l1*lc2*m2*sin(a3_2)*(Ic2 + lc2^2*m2))/(Ic1*Ic2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*sin(a3_2)^2);
  d2f(3,38) = (l1*lc2*m2*sin(a3_2)*(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + 2*l1*lc2^3*m2^2*cos(a3_2) + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*cos(a3_2)^2 + 2*Ic2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d2f(3,45) = (l1*lc2*m2*sin(a3_2)*(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + 2*l1*lc2^3*m2^2*cos(a3_2) + lc1^2*lc2^2*m1*m2 + l1^2*lc2^2*m2^2*cos(a3_2)^2 + 2*Ic2*l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d2f(4,9) = -(g*(l1*lc2^2*m2^2*sin(a3_1) - Ic1*lc2*m2*sin(a3_1 + a3_2) + Ic2*l1*m2*sin(a3_1) + Ic2*lc1*m1*sin(a3_1) - l1^2*lc2*m2^2*sin(a3_1 + a3_2) - lc1^2*lc2*m1*m2*sin(a3_1 + a3_2) + lc1*lc2^2*m1*m2*sin(a3_1) - l1*lc2^2*m2^2*sin(a3_1 + a3_2)*cos(a3_2) + l1^2*lc2*m2^2*cos(a3_2)*sin(a3_1) + l1*lc1*lc2*m1*m2*cos(a3_2)*sin(a3_1)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2);
  d2f(4,10) = (g*lc2*m2*(2*Ic1*sin(a3_1 + a3_2) + l1^2*m2*sin(a3_1 + a3_2) + 2*lc1^2*m1*sin(a3_1 + a3_2) + l1^2*m2*sin(a3_1 - a3_2) - l1*lc1*m1*sin(a3_1 + a3_2) + l1*lc1*m1*sin(a3_1 - a3_2) + 2*l1*lc2*m2*sin(a3_1 + 2*a3_2)))/(2*Ic1*Ic2 + l1^2*lc2^2*m2^2 + 2*Ic2*l1^2*m2 + 2*Ic2*lc1^2*m1 + 2*Ic1*lc2^2*m2 + 2*lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(2*a3_2)) - (2*g*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(l1*lc2^2*m2^2*cos(a3_1) - Ic1*lc2*m2*cos(a3_1 + a3_2) + Ic2*l1*m2*cos(a3_1) + Ic2*lc1*m1*cos(a3_1) - l1^2*lc2*m2^2*cos(a3_1 + a3_2) + lc1*lc2^2*m1*m2*cos(a3_1) - l1*lc2^2*m2^2*cos(a3_1 + a3_2)*cos(a3_2) + l1^2*lc2*m2^2*cos(a3_1)*cos(a3_2) - lc1^2*lc2*m1*m2*cos(a3_1 + a3_2) + l1*lc1*lc2*m1*m2*cos(a3_1)*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d2f(4,16) = (g*lc2*m2*(2*Ic1*sin(a3_1 + a3_2) + l1^2*m2*sin(a3_1 + a3_2) + 2*lc1^2*m1*sin(a3_1 + a3_2) + l1^2*m2*sin(a3_1 - a3_2) - l1*lc1*m1*sin(a3_1 + a3_2) + l1*lc1*m1*sin(a3_1 - a3_2) + 2*l1*lc2*m2*sin(a3_1 + 2*a3_2)))/(2*Ic1*Ic2 + l1^2*lc2^2*m2^2 + 2*Ic2*l1^2*m2 + 2*Ic2*lc1^2*m1 + 2*Ic1*lc2^2*m2 + 2*lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(2*a3_2)) - (2*g*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(l1*lc2^2*m2^2*cos(a3_1) - Ic1*lc2*m2*cos(a3_1 + a3_2) + Ic2*l1*m2*cos(a3_1) + Ic2*lc1*m1*cos(a3_1) - l1^2*lc2*m2^2*cos(a3_1 + a3_2) + lc1*lc2^2*m1*m2*cos(a3_1) - l1*lc2^2*m2^2*cos(a3_1 + a3_2)*cos(a3_2) + l1^2*lc2*m2^2*cos(a3_1)*cos(a3_2) - lc1^2*lc2*m1*m2*cos(a3_1 + a3_2) + l1*lc1*lc2*m1*m2*cos(a3_1)*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d2f(4,17) = (lc2*m2*(2*Ic1*g*sin(a3_1 + a3_2) - 4*a4_1*l1*cos(a3_2) - 4*a5_1*l1*cos(a3_2) + 2*a3_3^2*l1^3*m2*sin(a3_2) - 2*a3_3*b1*l1*cos(a3_2) + 4*a3_4*b2*l1*cos(a3_2) + g*l1^2*m2*sin(a3_1 + a3_2) + 2*g*lc1^2*m1*sin(a3_1 + a3_2) + 2*Ic1*a3_3^2*l1*sin(a3_2) + 2*Ic2*a3_3^2*l1*sin(a3_2) + 2*Ic2*a3_4^2*l1*sin(a3_2) - g*l1^2*m2*sin(a3_1 - a3_2) - g*l1*lc1*m1*sin(a3_1 - a3_2) + 4*g*l1*lc2*m2*sin(a3_1 + 2*a3_2) + 2*a3_3^2*l1*lc1^2*m1*sin(a3_2) + 2*a3_3^2*l1*lc2^2*m2*sin(a3_2) + 2*a3_4^2*l1*lc2^2*m2*sin(a3_2) - g*l1*lc1*m1*sin(a3_1 + a3_2) + 4*Ic2*a3_3*a3_4*l1*sin(a3_2) + 8*a3_3^2*l1^2*lc2*m2*sin(2*a3_2) + 4*a3_4^2*l1^2*lc2*m2*sin(2*a3_2) + 4*a3_3*a3_4*l1*lc2^2*m2*sin(a3_2) + 8*a3_3*a3_4*l1^2*lc2*m2*sin(2*a3_2)))/(2*Ic1*Ic2 + l1^2*lc2^2*m2^2 + 2*Ic2*l1^2*m2 + 2*Ic2*lc1^2*m1 + 2*Ic1*lc2^2*m2 + 2*lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(2*a3_2)) + (2*l1^2*lc2^3*m2^3*sin(2*a3_2)*(4*a4_1*l1*sin(a3_2) + 4*a5_1*l1*sin(a3_2) + 2*Ic1*g*cos(a3_1 + a3_2) + 2*a3_3^2*l1^3*m2*cos(a3_2) + 2*a3_3*b1*l1*sin(a3_2) - 4*a3_4*b2*l1*sin(a3_2) + g*l1^2*m2*cos(a3_1 + a3_2) + 2*g*lc1^2*m1*cos(a3_1 + a3_2) + 2*Ic1*a3_3^2*l1*cos(a3_2) + 2*Ic2*a3_3^2*l1*cos(a3_2) + 2*Ic2*a3_4^2*l1*cos(a3_2) + g*l1^2*m2*cos(a3_1 - a3_2) + 2*a3_3^2*l1*lc1^2*m1*cos(a3_2) + 2*a3_3^2*l1*lc2^2*m2*cos(a3_2) + 2*a3_4^2*l1*lc2^2*m2*cos(a3_2) - g*l1*lc1*m1*cos(a3_1 + a3_2) + 4*Ic2*a3_3*a3_4*l1*cos(a3_2) + 4*a3_3^2*l1^2*lc2*m2*cos(2*a3_2) + 2*a3_4^2*l1^2*lc2*m2*cos(2*a3_2) + g*l1*lc1*m1*cos(a3_1 - a3_2) + 2*g*l1*lc2*m2*cos(a3_1 + 2*a3_2) + 4*a3_3*a3_4*l1*lc2^2*m2*cos(a3_2) + 4*a3_3*a3_4*l1^2*lc2*m2*cos(2*a3_2)))/(2*Ic1*Ic2 + l1^2*lc2^2*m2^2 + 2*Ic2*l1^2*m2 + 2*Ic2*lc1^2*m1 + 2*Ic1*lc2^2*m2 + 2*lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(2*a3_2))^2 + (2*l1^2*lc2^2*m2^2*cos(a3_2)^2*(Ic1*a3_4*b2 - Ic2*a4_1 - Ic1*a5_1 - Ic2*a5_1 - Ic2*a3_3*b1 - Ic1*a4_1 + Ic2*a3_4*b2 - a4_1*l1^2*m2 - a5_1*l1^2*m2 - a4_1*lc1^2*m1 - a4_1*lc2^2*m2 - a5_1*lc1^2*m1 - a5_1*lc2^2*m2 + a3_4*b2*l1^2*m2 - a3_3*b1*lc2^2*m2 + a3_4*b2*lc1^2*m1 + a3_4*b2*lc2^2*m2 + g*l1^2*lc2*m2^2*sin(a3_1 + a3_2) + Ic1*g*lc2*m2*sin(a3_1 + a3_2) - g*l1*lc2^2*m2^2*sin(a3_1) + a3_3^2*l1^2*lc2^2*m2^2*sin(2*a3_2) + (a3_4^2*l1^2*lc2^2*m2^2*sin(2*a3_2))/2 - Ic2*g*l1*m2*sin(a3_1) - Ic2*g*lc1*m1*sin(a3_1) - 2*a4_1*l1*lc2*m2*cos(a3_2) - 2*a5_1*l1*lc2*m2*cos(a3_2) + a3_3^2*l1*lc2^3*m2^2*sin(a3_2) + a3_3^2*l1^3*lc2*m2^2*sin(a3_2) + a3_4^2*l1*lc2^3*m2^2*sin(a3_2) + g*l1*lc2^2*m2^2*sin(a3_1 + a3_2)*cos(a3_2) - a3_3*b1*l1*lc2*m2*cos(a3_2) + 2*a3_4*b2*l1*lc2*m2*cos(a3_2) - g*l1^2*lc2*m2^2*cos(a3_2)*sin(a3_1) + g*lc1^2*lc2*m1*m2*sin(a3_1 + a3_2) + Ic1*a3_3^2*l1*lc2*m2*sin(a3_2) + Ic2*a3_3^2*l1*lc2*m2*sin(a3_2) + Ic2*a3_4^2*l1*lc2*m2*sin(a3_2) - g*lc1*lc2^2*m1*m2*sin(a3_1) + a3_3*a3_4*l1^2*lc2^2*m2^2*sin(2*a3_2) + 2*a3_3*a3_4*l1*lc2^3*m2^2*sin(a3_2) + a3_3^2*l1*lc1^2*lc2*m1*m2*sin(a3_2) + 2*Ic2*a3_3*a3_4*l1*lc2*m2*sin(a3_2) - g*l1*lc1*lc2*m1*m2*cos(a3_2)*sin(a3_1)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*l1^2*lc2^2*m2^2*sin(a3_2)^2*(Ic1*a3_4*b2 - Ic2*a4_1 - Ic1*a5_1 - Ic2*a5_1 - Ic2*a3_3*b1 - Ic1*a4_1 + Ic2*a3_4*b2 - a4_1*l1^2*m2 - a5_1*l1^2*m2 - a4_1*lc1^2*m1 - a4_1*lc2^2*m2 - a5_1*lc1^2*m1 - a5_1*lc2^2*m2 + a3_4*b2*l1^2*m2 - a3_3*b1*lc2^2*m2 + a3_4*b2*lc1^2*m1 + a3_4*b2*lc2^2*m2 + g*l1^2*lc2*m2^2*sin(a3_1 + a3_2) + Ic1*g*lc2*m2*sin(a3_1 + a3_2) - g*l1*lc2^2*m2^2*sin(a3_1) + a3_3^2*l1^2*lc2^2*m2^2*sin(2*a3_2) + (a3_4^2*l1^2*lc2^2*m2^2*sin(2*a3_2))/2 - Ic2*g*l1*m2*sin(a3_1) - Ic2*g*lc1*m1*sin(a3_1) - 2*a4_1*l1*lc2*m2*cos(a3_2) - 2*a5_1*l1*lc2*m2*cos(a3_2) + a3_3^2*l1*lc2^3*m2^2*sin(a3_2) + a3_3^2*l1^3*lc2*m2^2*sin(a3_2) + a3_4^2*l1*lc2^3*m2^2*sin(a3_2) + g*l1*lc2^2*m2^2*sin(a3_1 + a3_2)*cos(a3_2) - a3_3*b1*l1*lc2*m2*cos(a3_2) + 2*a3_4*b2*l1*lc2*m2*cos(a3_2) - g*l1^2*lc2*m2^2*cos(a3_2)*sin(a3_1) + g*lc1^2*lc2*m1*m2*sin(a3_1 + a3_2) + Ic1*a3_3^2*l1*lc2*m2*sin(a3_2) + Ic2*a3_3^2*l1*lc2*m2*sin(a3_2) + Ic2*a3_4^2*l1*lc2*m2*sin(a3_2) - g*lc1*lc2^2*m1*m2*sin(a3_1) + a3_3*a3_4*l1^2*lc2^2*m2^2*sin(2*a3_2) + 2*a3_3*a3_4*l1*lc2^3*m2^2*sin(a3_2) + a3_3^2*l1*lc1^2*lc2*m1*m2*sin(a3_2) + 2*Ic2*a3_3*a3_4*l1*lc2*m2*sin(a3_2) - g*l1*lc1*lc2*m1*m2*cos(a3_2)*sin(a3_1)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (8*l1^4*lc2^4*m2^4*cos(a3_2)^2*sin(a3_2)^2*(Ic1*a3_4*b2 - Ic2*a4_1 - Ic1*a5_1 - Ic2*a5_1 - Ic2*a3_3*b1 - Ic1*a4_1 + Ic2*a3_4*b2 - a4_1*l1^2*m2 - a5_1*l1^2*m2 - a4_1*lc1^2*m1 - a4_1*lc2^2*m2 - a5_1*lc1^2*m1 - a5_1*lc2^2*m2 + a3_4*b2*l1^2*m2 - a3_3*b1*lc2^2*m2 + a3_4*b2*lc1^2*m1 + a3_4*b2*lc2^2*m2 + g*l1^2*lc2*m2^2*sin(a3_1 + a3_2) + Ic1*g*lc2*m2*sin(a3_1 + a3_2) - g*l1*lc2^2*m2^2*sin(a3_1) + a3_3^2*l1^2*lc2^2*m2^2*sin(2*a3_2) + (a3_4^2*l1^2*lc2^2*m2^2*sin(2*a3_2))/2 - Ic2*g*l1*m2*sin(a3_1) - Ic2*g*lc1*m1*sin(a3_1) - 2*a4_1*l1*lc2*m2*cos(a3_2) - 2*a5_1*l1*lc2*m2*cos(a3_2) + a3_3^2*l1*lc2^3*m2^2*sin(a3_2) + a3_3^2*l1^3*lc2*m2^2*sin(a3_2) + a3_4^2*l1*lc2^3*m2^2*sin(a3_2) + g*l1*lc2^2*m2^2*sin(a3_1 + a3_2)*cos(a3_2) - a3_3*b1*l1*lc2*m2*cos(a3_2) + 2*a3_4*b2*l1*lc2*m2*cos(a3_2) - g*l1^2*lc2*m2^2*cos(a3_2)*sin(a3_1) + g*lc1^2*lc2*m1*m2*sin(a3_1 + a3_2) + Ic1*a3_3^2*l1*lc2*m2*sin(a3_2) + Ic2*a3_3^2*l1*lc2*m2*sin(a3_2) + Ic2*a3_4^2*l1*lc2*m2*sin(a3_2) - g*lc1*lc2^2*m1*m2*sin(a3_1) + a3_3*a3_4*l1^2*lc2^2*m2^2*sin(2*a3_2) + 2*a3_3*a3_4*l1*lc2^3*m2^2*sin(a3_2) + a3_3^2*l1*lc1^2*lc2*m1*m2*sin(a3_2) + 2*Ic2*a3_3*a3_4*l1*lc2*m2*sin(a3_2) - g*l1*lc1*lc2*m1*m2*cos(a3_2)*sin(a3_1)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^3 + (l1^2*lc2^3*m2^3*cos(a3_2)*sin(a3_2)*(4*a4_1*l1*sin(a3_2) + 4*a5_1*l1*sin(a3_2) + 2*Ic1*g*cos(a3_1 + a3_2) + 2*a3_3^2*l1^3*m2*cos(a3_2) + 2*a3_3*b1*l1*sin(a3_2) - 4*a3_4*b2*l1*sin(a3_2) + g*l1^2*m2*cos(a3_1 + a3_2) + 2*g*lc1^2*m1*cos(a3_1 + a3_2) + 2*Ic1*a3_3^2*l1*cos(a3_2) + 2*Ic2*a3_3^2*l1*cos(a3_2) + 2*Ic2*a3_4^2*l1*cos(a3_2) + g*l1^2*m2*cos(a3_1 - a3_2) + 2*a3_3^2*l1*lc1^2*m1*cos(a3_2) + 2*a3_3^2*l1*lc2^2*m2*cos(a3_2) + 2*a3_4^2*l1*lc2^2*m2*cos(a3_2) - g*l1*lc1*m1*cos(a3_1 + a3_2) + 4*Ic2*a3_3*a3_4*l1*cos(a3_2) + 4*a3_3^2*l1^2*lc2*m2*cos(2*a3_2) + 2*a3_4^2*l1^2*lc2*m2*cos(2*a3_2) + g*l1*lc1*m1*cos(a3_1 - a3_2) + 2*g*l1*lc2*m2*cos(a3_1 + 2*a3_2) + 4*a3_3*a3_4*l1*lc2^2*m2*cos(a3_2) + 4*a3_3*a3_4*l1^2*lc2*m2*cos(2*a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d2f(4,18) = (2*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(2*a3_3*l1^2*lc2^2*m2^2*sin(2*a3_2) - b1*lc2^2*m2 - Ic2*b1 + a3_4*l1^2*lc2^2*m2^2*sin(2*a3_2) + 2*a3_3*l1*lc2^3*m2^2*sin(a3_2) + 2*a3_3*l1^3*lc2*m2^2*sin(a3_2) + 2*a3_4*l1*lc2^3*m2^2*sin(a3_2) - b1*l1*lc2*m2*cos(a3_2) + 2*Ic1*a3_3*l1*lc2*m2*sin(a3_2) + 2*Ic2*a3_3*l1*lc2*m2*sin(a3_2) + 2*Ic2*a3_4*l1*lc2*m2*sin(a3_2) + 2*a3_3*l1*lc1^2*lc2*m1*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (l1*lc2*m2*(b1*sin(a3_2) + 2*Ic1*a3_3*cos(a3_2) + 2*Ic2*a3_3*cos(a3_2) + 2*Ic2*a3_4*cos(a3_2) + 2*a3_3*l1^2*m2*cos(a3_2) + 2*a3_3*lc1^2*m1*cos(a3_2) + 2*a3_3*lc2^2*m2*cos(a3_2) + 2*a3_4*lc2^2*m2*cos(a3_2) + 4*a3_3*l1*lc2*m2*(2*cos(a3_2)^2 - 1) + 2*a3_4*l1*lc2*m2*(2*cos(a3_2)^2 - 1)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2);
  d2f(4,19) = (2*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(Ic1*b2 + Ic2*b2 + b2*l1^2*m2 + b2*lc1^2*m1 + b2*lc2^2*m2 + a3_3*l1^2*lc2^2*m2^2*sin(2*a3_2) + a3_4*l1^2*lc2^2*m2^2*sin(2*a3_2) + 2*a3_3*l1*lc2^3*m2^2*sin(a3_2) + 2*a3_4*l1*lc2^3*m2^2*sin(a3_2) + 2*b2*l1*lc2*m2*cos(a3_2) + 2*Ic2*a3_3*l1*lc2*m2*sin(a3_2) + 2*Ic2*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*l1*lc2*m2*(Ic2*a3_3*cos(a3_2) - b2*sin(a3_2) + Ic2*a3_4*cos(a3_2) + a3_3*lc2^2*m2*cos(a3_2) + a3_4*lc2^2*m2*cos(a3_2) + a3_3*l1*lc2*m2*(2*cos(a3_2)^2 - 1) + a3_4*l1*lc2*m2*(2*cos(a3_2)^2 - 1)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2);
  d2f(4,20) = -(2*l1*lc2*m2*sin(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2))*(Ic1 + l1^2*m2 + lc1^2*m1 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d2f(4,21) = -(2*l1*lc2*m2*sin(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2))*(Ic1 + l1^2*m2 + lc1^2*m1 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d2f(4,24) = (2*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(2*a3_3*l1^2*lc2^2*m2^2*sin(2*a3_2) - b1*lc2^2*m2 - Ic2*b1 + a3_4*l1^2*lc2^2*m2^2*sin(2*a3_2) + 2*a3_3*l1*lc2^3*m2^2*sin(a3_2) + 2*a3_3*l1^3*lc2*m2^2*sin(a3_2) + 2*a3_4*l1*lc2^3*m2^2*sin(a3_2) - b1*l1*lc2*m2*cos(a3_2) + 2*Ic1*a3_3*l1*lc2*m2*sin(a3_2) + 2*Ic2*a3_3*l1*lc2*m2*sin(a3_2) + 2*Ic2*a3_4*l1*lc2*m2*sin(a3_2) + 2*a3_3*l1*lc1^2*lc2*m1*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (2*lc2*m2*(b1*l1*sin(a3_2) + 2*Ic1*a3_3*l1*cos(a3_2) + 2*Ic2*a3_3*l1*cos(a3_2) + 2*Ic2*a3_4*l1*cos(a3_2) + 2*a3_3*l1^3*m2*cos(a3_2) + 2*a3_3*l1*lc1^2*m1*cos(a3_2) + 2*a3_3*l1*lc2^2*m2*cos(a3_2) + 2*a3_4*l1*lc2^2*m2*cos(a3_2) + 4*a3_3*l1^2*lc2*m2*cos(2*a3_2) + 2*a3_4*l1^2*lc2*m2*cos(2*a3_2)))/(2*Ic1*Ic2 + l1^2*lc2^2*m2^2 + 2*Ic2*l1^2*m2 + 2*Ic2*lc1^2*m1 + 2*Ic1*lc2^2*m2 + 2*lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(2*a3_2));
  d2f(4,25) = -(2*l1*lc2*m2*(Ic1*sin(a3_2) + Ic2*sin(a3_2) + l1^2*m2*sin(a3_2) + lc1^2*m1*sin(a3_2) + lc2^2*m2*sin(a3_2) + 2*l1*lc2*m2*cos(a3_2)*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2);
  d2f(4,26) = -(l1*lc2*m2*(2*Ic2*sin(a3_2) + 2*lc2^2*m2*sin(a3_2) + 2*l1*lc2*m2*cos(a3_2)*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2);
  d2f(4,31) = (2*l1^2*lc2^2*m2^2*cos(a3_2)*sin(a3_2)*(Ic1*b2 + Ic2*b2 + b2*l1^2*m2 + b2*lc1^2*m1 + b2*lc2^2*m2 + a3_3*l1^2*lc2^2*m2^2*sin(2*a3_2) + a3_4*l1^2*lc2^2*m2^2*sin(2*a3_2) + 2*a3_3*l1*lc2^3*m2^2*sin(a3_2) + 2*a3_4*l1*lc2^3*m2^2*sin(a3_2) + 2*b2*l1*lc2*m2*cos(a3_2) + 2*Ic2*a3_3*l1*lc2*m2*sin(a3_2) + 2*Ic2*a3_4*l1*lc2*m2*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2 - (4*lc2*m2*(Ic2*a3_3*l1*cos(a3_2) - b2*l1*sin(a3_2) + Ic2*a3_4*l1*cos(a3_2) + a3_3*l1*lc2^2*m2*cos(a3_2) + a3_4*l1*lc2^2*m2*cos(a3_2) + a3_3*l1^2*lc2*m2*cos(2*a3_2) + a3_4*l1^2*lc2*m2*cos(2*a3_2)))/(2*Ic1*Ic2 + l1^2*lc2^2*m2^2 + 2*Ic2*l1^2*m2 + 2*Ic2*lc1^2*m1 + 2*Ic1*lc2^2*m2 + 2*lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(2*a3_2));
  d2f(4,32) = -(l1*lc2*m2*(2*Ic2*sin(a3_2) + 2*lc2^2*m2*sin(a3_2) + 2*l1*lc2*m2*cos(a3_2)*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2);
  d2f(4,33) = -(l1*lc2*m2*(2*Ic2*sin(a3_2) + 2*lc2^2*m2*sin(a3_2) + 2*l1*lc2*m2*cos(a3_2)*sin(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2);
  d2f(4,38) = -(2*l1*lc2*m2*sin(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2))*(Ic1 + l1^2*m2 + lc1^2*m1 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
  d2f(4,45) = -(2*l1*lc2*m2*sin(a3_2)*(Ic2 + lc2^2*m2 + l1*lc2*m2*cos(a3_2))*(Ic1 + l1^2*m2 + lc1^2*m1 + l1*lc2*m2*cos(a3_2)))/(Ic1*Ic2 + l1^2*lc2^2*m2^2 + Ic2*l1^2*m2 + Ic2*lc1^2*m1 + Ic1*lc2^2*m2 + lc1^2*lc2^2*m1*m2 - l1^2*lc2^2*m2^2*cos(a3_2)^2)^2;
else
  d2f=[];
end  % if (order>=2)


 % NOTEST
